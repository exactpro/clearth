repositories {
	maven {
		name 'Sonatype'
		url 'https://s01.oss.sonatype.org/content/repositories/releases/'
	}
}

ext {
	bomVersion = '4.11.0'
}

configurations {
	all {
		resolutionStrategy {
			force "com.exactpro.th2:bom:${bomVersion}",
			      'com.google.j2objc:j2objc-annotations:3.0.0'
		}
	}
}

dependencies {
	//Core decides what logging implementation to use. So, excluding dependencies of th2-common
	api platform("com.exactpro.th2:bom:${bomVersion}") {
		exclude (group: 'org.apache.logging.log4j')
		exclude (group: 'org.slf4j')
	}
	api ('com.exactpro.th2:common:5.14.0-dev') {
		exclude (group: 'org.apache.logging.log4j')
		exclude (group: 'org.slf4j')
	}
	api ('com.exactpro.th2:grpc-check1:4.4.1-dev') {
		exclude (group: 'org.apache.logging.log4j')
		exclude (group: 'org.slf4j')
	}
	api ('com.exactpro.th2:common-utils:2.3.1-dev') {
		exclude (group: 'org.apache.logging.log4j')
		exclude (group: 'org.slf4j')
	}
	
	api 'org.apache.httpcomponents:fluent-hc:4.5.13'
	api 'org.apache.httpcomponents:httpclient:4.5.13'
	api 'org.apache.httpcomponents:httpcore:4.4.13'
	
	def log4jVersion = '2.22.1'
	testImplementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
	testImplementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}"
	testImplementation "org.apache.logging.log4j:log4j-jcl:${log4jVersion}"
}

publishing {
	publications {
		th2(MavenPublication) {
			groupId = "${group}"
			artifactId = 'clearth-th2'
			version = "${version}"
			
			from components.java
		}
	}
}

artifactoryPublish {
	publications(publishing.publications.th2)
}

ext {
	moduleName = 'th2'
	moduleImpl = 'com.exactprosystems.clearth:clearth-th2'
	if (!project.hasProperty('clearthDir'))
		clearthDir = undef
	installationDir = "${projectDir}/installation"
	clearthCfgDir = "${clearthDir}/cfg/"
}

task installModule {
	doLast {
		def actions = file("${projectDir}/installation/actions.cfg").text
		
		def type = new Tuple4("th2 loader",
				"com.exactprosystems.clearth.connectivity.th2.Th2LoaderConnection",
				"connections/th2loader",
				[])
		installModule(clearthDir, moduleName, moduleImpl,
				[
					{ putDataHandlersFactory(clearthDir, 'com.exactprosystems.clearth.data.th2.Th2DataHandlersFactory') },
					{ putFile("th2/box.json", installationDir, clearthCfgDir) },
					{ putFile("th2/storage.json", installationDir, clearthCfgDir) },
					{ putFile("th2/mq.json", installationDir, clearthCfgDir) },
					{ putFile("th2/rabbitMQ.json", installationDir, clearthCfgDir) },
					{ addConnectionTypeToCfg(type, clearthDir) },
					{ putActions(clearthDir, actions) }
				]
		)
		println("Please complete setup by updating files in ${clearthCfgDir}/th2/")
	}
}

def putDataHandlersFactory(clearthDir, factoryToAdd) {
	File cfg = getClearThCfg(clearthDir)
	Node rootNode = getClearThRootNode(cfg)
	Node updatedRootNode = putDataHandlersFactory(rootNode, factoryToAdd)
	updateClearThCfg(cfg, updatedRootNode)
	
	println("- DataHandlersFactory '${factoryToAdd}' put to clearth.cfg")
}

static Node putDataHandlersFactory(Node rootNode, factoryToAdd) {
	String dataNodeName = 'data'
	String factoryNodeName = 'dataHandlersFactory'
	Node dataNode = rootNode.get(dataNodeName)?.getAt(0)
	if (!dataNode) {
		dataNode = rootNode.appendNode(dataNodeName)
	}
	else {
		Node factoryNode = dataNode.get(factoryNodeName)?.getAt(0)
		if (factoryNode) {
			dataNode.remove(factoryNode)
		}
	}
	dataNode.appendNode(factoryNodeName, factoryToAdd)
	return rootNode
}